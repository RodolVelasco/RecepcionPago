<?php

namespace Ben\DoctorsBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * RecepcionPagoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RecepcionPagoRepository extends EntityRepository
{
    /* advanced search */
    public function search($searchParam) {
        extract($searchParam);
        $qb = $this->createQueryBuilder('rp')
                   ->leftJoin('rp.proveedor','p')
                   ->addSelect('rp')
                   ->leftJoin('rp.unidad','u')
                   ->addSelect('u')
                   ->leftJoin('rp.lineaTrabajo','lt')
                   ->addSelect('lt')
                   ->leftJoin('rp.periodo','pe')
                   ->addSelect('pe')
                   ->leftJoin('rp.tipoContratacion','tp')
                   ->addSelect('tp')
                   ->leftJoin('rp.periodoMes','pm')
                   ->addSelect('pm')
                   ->leftJoin('rp.estaAprobado','ea')
                   ->addSelect('ea');
        
        // or p.unidad.nombre like :keyword or p.lineaTrabajo.nombre like :keyword or p.periodo.periodo like :keyword
        if(!empty($keyword))
            $qb->andWhere('p.razonSocial like :keyword or u.nombre like :keyword or lt.nombre like :keyword')
                ->setParameter('keyword', '%'.$keyword.'%');
        if(!empty($ids))
            $qb->andWhere('rp.id in (:ids)')->setParameter('ids', $ids);
            
        if(!empty($numeroReferenciaInferior) AND empty($numeroReferenciaSuperior))
            $qb->andWhere('rp.numeroReferencia >= :numeroReferenciaInferior')
               ->setParameter('numeroReferenciaInferior', $numeroReferenciaInferior);
        if(empty($numeroReferenciaInferior) AND !empty($numeroReferenciaSuperior))
            $qb->andWhere('rp.numeroReferencia <= :numeroReferenciaSuperior')
               ->setParameter('numeroReferenciaSuperior', $numeroReferenciaSuperior);
        if(!empty($numeroReferenciaInferior) AND !empty($numeroReferenciaSuperior)){
            $qb->andWhere('rp.numeroReferencia >= :numeroReferenciaInferior')
               ->setParameter('numeroReferenciaInferior', $numeroReferenciaInferior);
            $qb->andWhere('rp.numeroReferencia <= :numeroReferenciaSuperior')
               ->setParameter('numeroReferenciaSuperior', $numeroReferenciaSuperior);
        }
        
        if(!empty($numeroActaInferior) AND empty($numeroActaSuperior))
            $qb->andWhere('rp.numeroActa >= :numeroActaInferior')
               ->setParameter('numeroActaInferior', $numeroActaInferior);
        if(empty($numeroActaInferior) AND !empty($numeroActaSuperior))
            $qb->andWhere('rp.numeroActa <= :numeroActaSuperior')
               ->setParameter('numeroActaSuperior', $numeroActaSuperior);
        if(!empty($numeroActaInferior) AND !empty($numeroActaSuperior)){
            $qb->andWhere('rp.numeroActa >= :numeroActaInferior')
               ->setParameter('numeroActaInferior', $numeroActaInferior);
            $qb->andWhere('rp.numeroActa <= :numeroActaSuperior')
               ->setParameter('numeroActaSuperior', $numeroActaSuperior);
        }
        
        if(!empty($periodo))
            $qb->andWhere('pe.periodo = :periodo')->setParameter('periodo', $periodo);
        if(!empty($periodoMes))
            $qb->andWhere('pm.nombre = :periodoMes')->setParameter('periodoMes', $periodoMes);
        
        if(!empty($proveedorAdvanced))
            $qb->andWhere('p.id = :proveedorAdvanced')->setParameter('proveedorAdvanced', $proveedorAdvanced);    
        if(!empty($unidad))
            $qb->andWhere('u.id = :unidad')->setParameter('unidad', $unidad);
        if(!empty($lineaTrabajo))
            $qb->andWhere('lt.id = :lineaTrabajo')->setParameter('lineaTrabajo', $lineaTrabajo);
        
        if(!empty($valorFacturaInferior) AND empty($valorFacturaSuperior))
            $qb->andWhere('rp.valorFactura >= :valorFacturaInferior')
               ->setParameter('valorFacturaInferior', $valorFacturaInferior);
        if(empty($valorFacturaInferior) AND !empty($valorFacturaSuperior))
            $qb->andWhere('rp.valorFactura <= :valorFacturaSuperior')
               ->setParameter('valorFacturaSuperior', $valorFacturaSuperior);
        if(!empty($valorFacturaInferior) AND !empty($valorFacturaSuperior)){
            $qb->andWhere('rp.valorFactura >= :valorFacturaInferior')
               ->setParameter('valorFacturaInferior', $valorFacturaInferior);
            $qb->andWhere('rp.valorFactura <= :valorFacturaSuperior')
               ->setParameter('valorFacturaSuperior', $valorFacturaSuperior);
        }
        
        if(!empty($fechaRecepcionOdcInferior) AND empty($fechaRecepcionOdcSuperior))
            $qb->andWhere('rp.fechaRecepcionOdcContrato >= :fechaRecepcionOdcInferior')
               ->setParameter('fechaRecepcionOdcInferior', $fechaRecepcionOdcInferior);
        if(empty($fechaRecepcionOdcInferior) AND !empty($fechaRecepcionOdcSuperior))
            $qb->andWhere('rp.fechaRecepcionOdcContrato <= :fechaRecepcionOdcSuperior')
               ->setParameter('fechaRecepcionOdcSuperior', $fechaRecepcionOdcSuperior);
        if(!empty($fechaRecepcionOdcInferior) AND !empty($fechaRecepcionOdcSuperior)){
            $qb->andWhere('rp.fechaRecepcionOdcContrato >= :fechaRecepcionOdcInferior')
               ->setParameter('fechaRecepcionOdcInferior', $fechaRecepcionOdcInferior);
            $qb->andWhere('rp.fechaRecepcionOdcContrato <= :fechaRecepcionOdcSuperior')
               ->setParameter('fechaRecepcionOdcSuperior', $fechaRecepcionOdcSuperior);
        }
        
        if(!empty($tipoContratacion))
            $qb->andWhere('tp.id = :tipoContratacion')->setParameter('tipoContratacion', $tipoContratacion);
        if(!empty($estado)){
            if($estado != 11){
                if($estado != 12){
                    $qb->andWhere('rp.estado = :estado')->setParameter('estado', $estado);
                }else{
                    $qb->andWhere('rp.estado = 4');
                    $qb->andWhere('rp.imageName is NULL');
                }
                if($estado == 4){
                        $qb->andWhere('rp.imageName is not NULL');
                    }
                
            }else{
                $qb->andWhere('rp.estado IN (:estado)')->setParameter('estado', array(4,10));
                $qb->andWhere('rp.imageName is not NULL');
            }
        }
        
        
        if(!empty($estadoDesdeNotaEnvio))
            $qb->andWhere('(rp.estado = 4 OR rp.estado = 10)');
        if(!empty($estaAprobadoDesdeNotaEnvio)){
            $qb->andWhere('(ea.nombre = :aprobado OR ea.nombre = :rechazado)')
               ->setParameter('aprobado','Aprobado')
               ->setParameter('rechazado','Rechazado');
        }
        if(!empty($estadoDesdeNotaEnvio) AND !empty($estaAprobadoDesdeNotaEnvio))
            $qb->andWhere('rp.imageName is not NULL');
            
        /*if(!empty($date_from))
            $qb->andWhere('p.birthday > :date_from')->setParameter('date_from', $date_from);
        if(!empty($date_to))
            $qb->andWhere('p.birthday < :date_to')->setParameter('date_to', $date_to);
        */
        if(!empty($sortBy)){
            $sortBy = in_array($sortBy, array('id', 'proveedor', 'unidad', 'tipocontratacion')) ? $sortBy : 'id';
            $sortDir = ($sortDir == 'ASC') ? 'ASC' : 'DESC';
            $qb->orderBy('rp.' . $sortBy, $sortDir);
        }
        
        if(!empty($perPage)) $qb->setFirstResult(($page - 1) * $perPage)->setMaxResults($perPage);

       return new Paginator($qb->getQuery());
    }
    
    public function searchTecnico($searchParam, $estado) {
        extract($searchParam);
        
        $qb = $this->createQueryBuilder('rp')
                   ->leftJoin('rp.proveedor','p')
                   ->addSelect('rp')
                   ->leftJoin('rp.unidad','u')
                   ->addSelect('u')
                   ->leftJoin('rp.lineaTrabajo','lt')
                   ->addSelect('lt')
                   ->leftJoin('rp.periodo','pe')
                   ->addSelect('pe')
                   ->leftJoin('rp.tipoContratacion','tp')
                   ->addSelect('tp');
        
        if(!empty($keyword))
            $qb->andWhere('p.razonSocial like :keyword or u.nombre like :keyword or lt.nombre like :keyword')
                ->setParameter('keyword', '%'.$keyword.'%');
        if(!empty($ids))
            $qb->andWhere('rp.id in (:ids)')->setParameter('ids', $ids);
        
        if(!empty($periodo))
            $qb->andWhere('pe.periodo = :periodo')->setParameter('periodo', $periodo);
        
        if(!empty($proveedorAdvanced))
            $qb->andWhere('p.id = :proveedorAdvanced')->setParameter('proveedorAdvanced', $proveedorAdvanced);    
        if(!empty($unidad))
            $qb->andWhere('u.id = :unidad')->setParameter('unidad', $unidad);
        if(!empty($lineaTrabajo))
            $qb->andWhere('lt.id = :lineaTrabajo')->setParameter('lineaTrabajo', $lineaTrabajo);
        
        if(!empty($tipoContratacion))
            $qb->andWhere('tp.id = :tipoContratacion')->setParameter('tipoContratacion', $tipoContratacion);
        
        if(!empty($sortBy)){
            $sortBy = in_array($sortBy, array('id', 'proveedor', 'unidad', 'tipocontratacion')) ? $sortBy : 'id';
            $sortDir = ($sortDir == 'ASC') ? 'ASC' : 'DESC';
            $qb->orderBy('rp.' . $sortBy, $sortDir);
        }
        if(!empty($perPage)) $qb->setFirstResult(($page - 1) * $perPage)->setMaxResults($perPage);

       return new Paginator($qb->getQuery());
    }

    public function counter() {
        $qb = $this->createQueryBuilder('p')->select('COUNT(p)');
        return $qb->getQuery()->getSingleScalarResult();
    }
    
    public function counterTecnico() {
        $qb = $this->createQueryBuilder('p')
            ->select('COUNT(p)')
            ->where('p.estado = 1');
        return $qb->getQuery()->getSingleScalarResult();
    }
    public function getProveedores()
    {
        return  $this->fetch("select id as id, razon_social as label from proveedor");
    }
    public function getPeriodos()
    {
        return  $this->fetch("select distinct nombre as label from periodo");
    }
    public function getPeriodoMeses()
    {
        return  $this->fetch("select distinct nombre as label from periodomes");
    }
    public function getUnidades()
    {
        return  $this->fetch("select id as id, nombre as label from unidad");
    }
    public function getTipoContrataciones()
    {
        return  $this->fetch("select id as id, nombre as label from tipocontratacion");
    }
    /*public function getEstaAprobados()
    {
        return  $this->fetch("select id as id, nombre as label from esta_aprobado");
    }*/
    private function fetch($query)
    {
        $stmt = $this->getEntityManager()->getConnection()->prepare($query);
        $stmt->execute();
        return  $stmt->fetchAll();
    }
}
